AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy an ECS service
Parameters:
  EnvironmentName:
    Type: String
    Default: statistico-production
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: statistico-web-gateway-rest
    Description: A name for the service
  ContainerName:
    Type: String
    Default: rest
  ImageUrl:
    Type: String
    Default: 216629550457.dkr.ecr.eu-west-2.amazonaws.com/statistico-web-gateway:80409142fd1a2238ba4e714558be15fef3830fdc
    Description: The url of a docker image that contains the application process that
      will handle the traffic for this service
  ContainerMemory:
    Type: Number
    Default: 128
    Description: How much memory in megabytes to give the container
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  Host:
    Type: String
    Default: api.statistico.io
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different hosts to forward to from the load balancer.

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Memory: !Ref 'ContainerMemory'
      ExecutionRoleArn: arn:aws:iam::216629550457:role/ecsTaskExecutionRole
      ContainerDefinitions:
        # The actual service container. It should only accept inbound traffic
        # from Consul Connect, and if it needs to talk to another service it does
        # so via a localhost proxy pipe opened by the Consul Connect sidecar
        - Name: !Ref 'ContainerName'
          Image: !Ref 'ImageUrl'
          Memory: !Ref 'ContainerMemory'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          Environment:
            - Name: STATISTICO_DATA_SERVICE_HOST
              Value: statistico-data-grpc.statistico.internal
            - Name: STATISTICO_DATA_SERVICE_PORT
              Value: 50051
          Command:
            - "./rest"
          Essential: true
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - TargetGroupArn: !Ref 'WebGatewayServiceRestTargetGroup'
          ContainerName: !Ref 'ContainerName'
          ContainerPort: !Ref 'ContainerPort'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  WebGatewayServiceRestTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref 'ServiceName'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - WebGatewayServiceRestTargetGroup
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebGatewayServiceRestTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values: [!Ref 'Host']
      ListenerArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:PublicHttpsListener
      Priority: !Ref 'Priority'