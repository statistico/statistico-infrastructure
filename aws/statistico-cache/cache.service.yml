AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service into an ECS cluster with service discovery endpoint
Parameters:
  EnvironmentName:
    Type: String
    Default: statistico-production
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: statistico-cache
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: redis
    Description: The url of a docker image that contains the application process that
      will handle the traffic for this service
  ContainerMemory:
    Type: Number
    Default: 128
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: 'awsvpc'
      ExecutionRoleArn: arn:aws:iam::216629550457:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: 'cache'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: ServiceDiscoveryService
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnetOne
            - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnetTwo
      DesiredCount: !Ref 'DesiredCount'
      TaskDefinition: !Ref 'TaskDefinition'
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryService.Arn

  # Create a service discovery service in the private service namespace.
  ServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Ref ServiceName
      DnsConfig:
        DnsRecords: [{Type: "A", TTL: "300"}]
        NamespaceId:
          Fn::ImportValue: !Sub ${EnvironmentName}:ServiceDiscoveryNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1

  # Rule which allows the containers to talk to other containers in the same group.
  # This is what allows a container to use service discovery to get the IP and talk
  # to another container in the same group.
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the cluster
      GroupId:
        Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
