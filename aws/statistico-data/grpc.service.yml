AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service into an ECS cluster with service discovery endpoint
Parameters:
  EnvironmentName:
    Type: String
    Default: statistico-production
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: statistico-data-grpc
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: 216629550457.dkr.ecr.eu-west-2.amazonaws.com/statistico-data:ecfc4dac26b90438fc2c8f3884b38e1b2c2e0d68
    Description: The url of a docker image that contains the application process that
      will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 50051
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  MinContainers:
    Type: Number
    Default: 1
    Description: Minimum number of copies of the service task to run
  MaxContainers:
    Type: Number
    Default: 3
    Description: Maximum number ofcopies of the service task to run
  AutoScalingTargetValue:
    Type: Number
    Default: 50
    Description: "Target CPU utilization (%) for ECS services auto scaling"
  Domain:
    Type: String
    Default: statistico.internal
    Description: The name of the namespace. Services are prepended, for example user.service.production

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: arn:aws:iam::216629550457:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: 'grpc'
          Image: !Ref 'ImageUrl'
          Essential: true
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
              Protocol: tcp
          Secrets:
            - Name: DB_DRIVER
              ValueFrom: arn:aws:ssm:eu-west-2:216629550457:parameter/statistico-data-DB_DRIVER
            - Name: DB_HOST
              ValueFrom: arn:aws:ssm:eu-west-2:216629550457:parameter/statistico-data-DB_HOST
            - Name: DB_NAME
              ValueFrom: arn:aws:ssm:eu-west-2:216629550457:parameter/statistico-data-DB_NAME
            - Name: DB_PASSWORD
              ValueFrom: arn:aws:ssm:eu-west-2:216629550457:parameter/statistico-data-DB_PASSWORD
            - Name: DB_PORT
              ValueFrom: arn:aws:ssm:eu-west-2:216629550457:parameter/statistico-data-DB_PORT
            - Name: DB_USER
              ValueFrom: arn:aws:ssm:eu-west-2:216629550457:parameter/statistico-data-DB_USER
            - Name: SENTRY_DSN
              ValueFrom: arn:aws:ssm:eu-west-2:216629550457:parameter/statistico-data-SENTRY_DSN
          Command:
            - "./grpc"
            - "--port 50051"
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'

  # Create a service discovery service in the private service namespace.
  ServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    DependsOn: ServiceDiscoveryNamespace
    Properties:
      Name: !Ref ServiceName
      DnsConfig:
        DnsRecords: [{Type: "A", TTL: "300"}]
        NamespaceId: !Ref 'ServiceDiscoveryNamespace'
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref Domain
      Vpc:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: ServiceDiscoveryService
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'MinContainers'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnetOne
            - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnetTwo
      TaskDefinition: !Ref 'TaskDefinition'
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryService.Arn

  # Rule which allows the containers to talk to other containers in the same group.
  # This is what allows a container to use service discovery to get the IP and talk
  # to another container in the same group.
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the cluster
      GroupId:
        Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join [ '/', [ service, 'statistico-production', !GetAtt Service.Name ] ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

Outputs:
  ServiceDiscoveryNamespace:
    Description: Name of the global service discovery namespace
    Value: !Ref 'ServiceDiscoveryNamespace'
    Export:
      Name: !Sub ${EnvironmentName}:ServiceDiscoveryNamespace